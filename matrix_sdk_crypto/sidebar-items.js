initSidebarItems({"enum":[["DecryptorError","Error type for attachment decryption."],["IncomingResponse","Enum over all the incoming responses we need to receive."],["LocalTrust","The local trust state of a device."],["MegolmError","Error representing a failure during a group encryption operation."],["OlmError","Error representing a failure during a device to device cryptographic operation."],["OutgoingRequests","Enum over the different outgoing requests we can have."],["OutgoingVerificationRequest",""],["UserIdentities","Enum over the different user identity types we can have."]],"fn":[["decrypt_key_export","Try to decrypt a reader into a list of exported room keys."],["encrypt_key_export","Encrypt the list of exported room keys using the given passphrase."]],"mod":[["olm","The crypto specific Olm objects."],["store","Types and traits to implement the storage layer for the `OlmMachine`"]],"struct":[["AcceptSettings","Customize the accept-reply for a verification process"],["AttachmentDecryptor","A wrapper that transparently encrypts anything that implements `Read` as an Matrix attachment."],["AttachmentEncryptor","A wrapper that transparently encrypts anything that implements `Read`."],["Device","A device represents a E2EE capable client of an user."],["EncryptionInfo","Struct holding all the information that is needed to decrypt an encrypted file."],["EncryptionSettings","Settings for an encrypted room."],["KeysQueryRequest","Customized version of `ruma_client_api::r0::keys::get_keys::Request`, without any references."],["OlmMachine","State machine implementation of the Olm/Megolm encryption protocol used for Matrix end to end encryption."],["OutgoingRequest","Outgoing request type, holds the unique ID of the request and the actual request."],["OwnUserIdentity","Struct representing a cross signing identity of our own user."],["ReadOnlyDevice","A read-only version of a `Device`."],["RoomMessageRequest",""],["Sas","Short authentication string object."],["ToDeviceRequest","Customized version of `ruma_client_api::r0::to_device::send_event_to_device::Request`, using a UUID for the transaction ID."],["UserDevices","A read only view over all devices belonging to a user."],["UserIdentity","Struct representing a cross signing identity of a user."],["VerificationRequest","TODO"]]});