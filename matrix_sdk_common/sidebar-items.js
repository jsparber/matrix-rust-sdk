initSidebarItems({"attr":[["async_trait",""]],"derive":[["Outgoing","Derive the `Outgoing` trait, possibly generating an ‘Incoming’ version of the struct this derive macro is used on. Specifically, if no lifetime variables are used on any of the fields of the struct, this simple implementation will be generated:"]],"enum":[["AuthScheme","Authentication scheme used by the endpoint."],["CanonicalJsonValue",""],["FromHttpRequestError","An error when converting a http request to one of ruma’s endpoint-specific request types."],["FromHttpResponseError","An error when converting a http response to one of Ruma’s endpoint-specific response types."],["IntoHttpError","An error when converting one of ruma’s endpoint-specific request or response types to the corresponding http type."],["ServerError","An error was reported by the server (HTTP status code 4xx or 5xx)"]],"macro":[["assign","Mutate a struct value in a declarative style."],["int","Creates an `Int` from a numeric literal."],["uint","Creates a `UInt` from a numeric literal."]],"mod":[["deserialized_responses",""],["directory","Common types for room directory endpoints"],["encryption","Common types for encryption related tasks."],["locks",""],["presence","Common types for the presence module"],["push","Common types for the push notifications module"],["thirdparty","Common types for the third party networks module"]],"struct":[["Int","An integer limited to the range of integers that can be represented exactly by an f64."],["Raw","A wrapper around `Box<RawValue>`, to be used in place of any type in the Matrix endpoint definition to allow request and response types to contain that said type represented by the generic argument `Ev`."],["UInt","An integer limited to the range of non-negative integers that can be represented exactly by an f64."]],"trait":[["AsyncTraitDeps","Super trait that is used for our store traits, this trait will differ if it’s used on WASM. WASM targets will not require `Send` and `Sync` to have implemented, while other targets will."],["EndpointError","Gives users the ability to define their own serializable / deserializable errors."],["Outgoing","A type that can be sent to another party that understands the matrix protocol. If any of the fields of `Self` don’t implement serde’s `Deserialize`, you can derive this trait to generate a corresponding ‘Incoming’ type that supports deserialization. This is useful for things like ruma_events’ `EventResult` type. For more details, see the derive macro’s documentation."],["OutgoingRequest","A request type for a Matrix API endpoint. (trait used for sending requests)"]]});